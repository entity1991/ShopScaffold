micropost.user	Возвращает объект User связанный с микросообщением.
user.microposts	Возвращает массив микросообщений пользователя.
user.microposts.create(arg)	Создает микросообщение (user_id = user.id).
user.microposts.create!(arg)	Создает микросообщение (с исключением в случае неудачи).
user.microposts.build(arg)	Возвращает объект new Micropost (user_id = user.id).

Micropost.where("user_id = ?", id)

<% user = micropost.user rescue User.find(micropost.user_id) %>
<% if current_user?(user) %>

(сложное) Добавить JavaScript отображение к Home странице для обратного отсчета 140 знаков.

Сделать рефакторинг Home страницы чтобы использовать отдельные партиалы для двух ветвей выражения if-else.

Добавить вложенные маршруты так, чтобы по адресу /users/1/microposts показывались все микросообщения пользователя 1.
(Вам также необходимо будет добавить в контроллер Microposts действие index и соответствующее представление.)

Сейчас очень длинные слова крушат наш шаблон, как это показано на Рис. 11.17. Исправьте эту проблему с помощью хелпера
wrap определенного в Листинге 11.42. (Обратите внимание на использование метода raw для предотвращения маскирования
Рельсами результирующего HTML, совместно с sanitize методом необходимым для предотвращения межсайтового скриптинга.)

module MicropostsHelper

  def wrap(content)
    sanitize(raw(content.split.map{ |s| wrap_long_string(s) }.join(' ')))
  end

  private

    def wrap_long_string(text, max_width = 30)
      zero_width_space = "&#8203;"
      regex = /.{1,#{max_width}}/
      (text.length < max_width) ? text :
                                  text.scan(regex).join(zero_width_space)
    end
end

coffee

/*Top level list items*/ - which commment

home page

link to admin

custom validation message

class="<%= cycle('list_line_odd', 'list_line_even') %>"

• Add the ability to delete individual line items from the cart. This will require
buttons on each line, and such buttons will need to be linked to
the destroy() action in the LineItemsController.

global variable in view page

rendering js.erb in controller

Add a button next to each item in the cart. When clicked, it should invoke
an action to decrement the quantity of the item, deleting it from the cart
when the quantity reaches zero. Get it working without using Ajax first,
and then add the Ajax goodness.

legend and fieldset

select promt

Playtime
• Add a ship_date column to the orders table, and send a notification when
this value is updated by the OrdersController.
• Update the application to send an email to the system administrator,
namely, yourself, when there is an application failure such as the one we
handled in Section 10.2, Iteration E2: Handling Errors, on page 119.

has_secure_password

gem 'redcloth'

person - people
